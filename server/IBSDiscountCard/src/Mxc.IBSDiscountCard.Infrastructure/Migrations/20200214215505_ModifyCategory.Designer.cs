// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mxc.IBSDiscountCard.Infrastructure.Repositories;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Mxc.IBSDiscountCard.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200214215505_ModifyCategory")]
    partial class ModifyCategory
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Mxc.IBSDiscountCard.Infrastructure.Repositories.Category.CategoryDb", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Lang_Key");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Mxc.IBSDiscountCard.Infrastructure.Repositories.Institute.InstituteDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Institutes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5906014-cc56-4aff-abb3-2db3cdb40a21"),
                            Name = "International Business School"
                        });
                });

            modelBuilder.Entity("Mxc.IBSDiscountCard.Infrastructure.Repositories.Place.Models.PlaceDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<bool>("IsHidden");

                    b.Property<string>("Name");

                    b.Property<string>("PreviewImage");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("Mxc.IBSDiscountCard.Infrastructure.Repositories.User.RoleDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Mxc.IBSDiscountCard.Infrastructure.Repositories.User.SubscriptionDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("ErrorMessage");

                    b.Property<string>("ExternalSubscriptionId");

                    b.Property<DateTimeOffset>("FreeEndDate");

                    b.Property<DateTimeOffset?>("PremiumCancelDate");

                    b.Property<DateTimeOffset?>("PremiumStartDate");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionDb");
                });

            modelBuilder.Entity("Mxc.IBSDiscountCard.Infrastructure.Repositories.User.UserDb", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ActivationCode");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("CustomerId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<Guid>("InstitudeId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<int>("PasswordChangeFailedCount");

                    b.Property<DateTimeOffset?>("PasswordChangeLockoutEnd");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordResetCode");

                    b.Property<DateTimeOffset?>("PasswordResetLockEnd");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfilePhoto");

                    b.Property<string>("SecurityStamp");

                    b.Property<Guid?>("SubscriptionId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Mxc.IBSDiscountCard.Infrastructure.Repositories.User.RoleDb")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Mxc.IBSDiscountCard.Infrastructure.Repositories.User.UserDb")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Mxc.IBSDiscountCard.Infrastructure.Repositories.User.UserDb")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Mxc.IBSDiscountCard.Infrastructure.Repositories.User.RoleDb")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mxc.IBSDiscountCard.Infrastructure.Repositories.User.UserDb")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Mxc.IBSDiscountCard.Infrastructure.Repositories.User.UserDb")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mxc.IBSDiscountCard.Infrastructure.Repositories.Place.Models.PlaceDb", b =>
                {
                    b.OwnsOne("Mxc.IBSDiscountCard.Infrastructure.Repositories.Place.Models.AddressDb", "Address", b1 =>
                        {
                            b1.Property<Guid>("Id");

                            b1.Property<string>("DisplayAddress");

                            b1.Property<double>("Latitude");

                            b1.Property<double>("Longitude");

                            b1.HasKey("Id");

                            b1.ToTable("Places");

                            b1.HasOne("Mxc.IBSDiscountCard.Infrastructure.Repositories.Place.Models.PlaceDb")
                                .WithOne("Address")
                                .HasForeignKey("Mxc.IBSDiscountCard.Infrastructure.Repositories.Place.Models.AddressDb", "Id")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsMany("Mxc.IBSDiscountCard.Infrastructure.Repositories.Place.Models.DiscountDb", "Discounts", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd();

                            b1.Property<string>("BasicDiscountDescription")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("InstitudeId");

                            b1.Property<int?>("MaxBasicDiscount");

                            b1.Property<int?>("MaxPremiumDiscount");

                            b1.Property<Guid>("PlaceDbId");

                            b1.Property<string>("PremiumDiscountDescription")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("PlaceDbId");

                            b1.ToTable("DiscountDb");

                            b1.HasOne("Mxc.IBSDiscountCard.Infrastructure.Repositories.Place.Models.PlaceDb")
                                .WithMany("Discounts")
                                .HasForeignKey("PlaceDbId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Mxc.IBSDiscountCard.Infrastructure.Repositories.Place.Models.OpeningHoursOfDayDb", "OpeningHours", b1 =>
                        {
                            b1.Property<Guid>("Id");

                            b1.Property<string>("Friday");

                            b1.Property<string>("Monday");

                            b1.Property<string>("Saturday");

                            b1.Property<string>("Sunday");

                            b1.Property<string>("Thursday");

                            b1.Property<string>("Tuesday");

                            b1.Property<string>("Wednesday");

                            b1.HasKey("Id");

                            b1.ToTable("Places");

                            b1.HasOne("Mxc.IBSDiscountCard.Infrastructure.Repositories.Place.Models.PlaceDb")
                                .WithOne("OpeningHours")
                                .HasForeignKey("Mxc.IBSDiscountCard.Infrastructure.Repositories.Place.Models.OpeningHoursOfDayDb", "Id")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Mxc.IBSDiscountCard.Infrastructure.Repositories.User.UserDb", b =>
                {
                    b.HasOne("Mxc.IBSDiscountCard.Infrastructure.Repositories.User.SubscriptionDb", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId");
                });
#pragma warning restore 612, 618
        }
    }
}
